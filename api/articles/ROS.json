{"title":"ROS","uid":"d1785060d540402d26f62361462e606a","slug":"ROS","date":"2023-09-06T14:25:57.000Z","updated":"2023-10-02T12:09:33.742Z","comments":true,"path":"api/articles/ROS.json","keywords":null,"cover":[],"content":"<p><img src=\"/static/img/d2.jpg\"></p>\n<h1 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h1><p>ROS类似一个数据传输的管道,也提供接口,好比cpu和其他设备间信息交互的总线.一开始是为解决机器人上信息传输问题,因而目前ROS开发社区中对这一块的库可以说很丰富了(包括处理各类传感器信息,控制命令,节点间的通信)<br>比如,在同台电脑同一操作系统上,一边用仿真软件做机械臂仿真(这里就当用模型是URDF或axcro一类)那我可以写一段ROS程序来获取仿真中机械臂的运动,同时写发布函数,再开个matlab,下载相应库,再写段接收函数,就能获取<br>机械臂的运动数据,同时在matlab上进行反运动学处理(IK)获取每个电机需要转动角.</p>\n<h1 id=\"ROS1和ROS2\"><a href=\"#ROS1和ROS2\" class=\"headerlink\" title=\"ROS1和ROS2\"></a>ROS1和ROS2</h1><p>ROS每一段时间(4year?)会更新一次版本,同时官方对每个版本也有一定维护时期,目前(2023.9.22)ROS1算是已经到头了.</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>(越成熟的,上手越顺滑)</p>\n<ul>\n<li>ROS1只适配linux系统   || ROS2可以跨平台,支持win,linux,mac</li>\n<li>ROS1针对C++和Python的库为roscpp和rospy || ROS2针对C++和Python的库为rclpp和rclpy</li>\n<li>ROS1中的节点和消息由一个Master管理,需要在终端中运行 <strong>roscore</strong> 来启动,后续才可以运行节点和通信 || ROS2采用<strong>DDS</strong>作为中间层,内部有用c语言实现的rmw库来和DDS直接交互</li>\n<li>ROS1中用<strong>catkin tool</strong>来编译包 || ROS2中用<strong>colcon tool</strong>来做编译</li>\n<li>ROS1中python文件运行相对方便,调试也轻松不用重新编译 || ROS2中python程序运行需要编写setup.py文件来指定入口,且修改程序需要重新编译  (待修正)</li>\n<li>ROS1的Launch编写只限与xml格式,功能上也比较简单,启动文件,加载参数 || ROS2的Launch可采取<em>py</em>,<em>xml</em>,<em>yaml</em>格式 (<strong>其实还是建议用.py,其他的我用的不是很上</strong>) ROS2启动gazebo需要重新安装(ros1的在这不顶用,包括其他的一些包[urdf…],都存在ros1,ros2不共用问题)<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>sudo apt install ros-foxy(ros2版本)-gazebo-ros-pkgs</p></blockquote>\n</li>\n<li>ROS1和ROS2可以共存,但是不能同时在环境变量中启用</li>\n<li>ROS1配置工作空间 <strong>source &#x2F;devel&#x2F;setup.bash&#x2F;</strong> || ROS2配置工作空间 <strong>. install&#x2F;setup.bash</strong>   (也就是刷新环境,如果将此代码放置在环境变量 <em>~&#x2F;.bashrc</em> 中则不用每次使用前都输入)<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>echo “source ~&#x2F;work_space(工作空间)&#x2F;devel&#x2F;setup.bash” &gt;&gt; ~&#x2F;.bashrc</p></blockquote>\n</li>\n</ul>\n<h3 id=\"setup-py打包\"><a href=\"#setup-py打包\" class=\"headerlink\" title=\"setup.py打包\"></a>setup.py打包</h3><p>c++程序的项目依赖和信息可以从CMakelist.tex和package.xml里获取. 在 <em>ROS2</em> 的python项目中主要依赖setup.py和package.xml. setup.py负责对项目打包,在ROS2中用来简化python项目打包过程,同时也能从package.xml里动态导入信息到python安装文件中,将硬编码信息更改为调用 Ros2Setup 以从 XML 文件中提取数据.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>C++项目中:package.xml包含了项目所需软件包的元信息,CMakelist.txt来描述项目软件包如何去代码构建(所需要编译内容). Python项目中没有CMakelist.txt,取而代之由 <em>setup.py</em> 来描述如何安装软件包<br>除此之外,完整的ROS2 Python项目还可能具有 <em>setup.cfg</em>(存放功能包中可执行文件) 和一个在功能包中与功能包同名的文件(用于存放__init__.py,ros2通过这个来找寻功能包).        !!!!!!!!!!!!!!!!!!!!!</p></blockquote>\n<h1 id=\"ROS1和ROS2的一些基础信息\"><a href=\"#ROS1和ROS2的一些基础信息\" class=\"headerlink\" title=\"ROS1和ROS2的一些基础信息\"></a>ROS1和ROS2的一些基础信息</h1><ol>\n<li><p>ROS作为数据传输工具,具有3种传输方式[topic,service,action],有一个类似的[parameter.service].<br><strong>Topic:</strong> 是一类数据 <em>同步</em> 传输方案,节点间通过publisher和subscriber进行数据收发.<br><strong>Service:</strong> 是一类数据 <em>异步</em> 传输方案,节点间通过server和client进行数据收发.<br><strong>Action:</strong> 是一类数据 <em>指定</em> 传输方案,通过按一定频率发布数据,同时接收返回值(若中间没有其他传输干扰)一直执行到达成目标,节点间通过(Action)server和(Action)client.</p>\n</li>\n<li><p>[launch]文件类似于bash脚本,可以一件执行多个文件,不过碍于本身是xml类型,能做的功能好像也只限于启动文件.内有一些标签可以添加配置信息,不过也是服务于ROS和连接设备这一方面的了.  运行一个launch文件ROS采用</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>  roslaunch package_name launch_name &amp;&amp; ros2 launch package_name launch_name (一般launch也是放在功能包中)     ROS2中 launch文件可能需要手动放置到install&#x2F;..&#x2F;share相应功能包的里才能被找到</p></blockquote>\n</li>\n<li><p>[工作空间]就是你项目的repository,也是你采用编译工具的目录.一般是工作空间中创建一个src文件夹来存放[功能包],每个<em>功能包</em>中又存放你的源文件和环境依赖信息(CMakelist和package),当你在工作空间目录编译(cmake或者colcon)后,当前目录会出现build,install,log目录,用来存放历史log和你的包配置信息.运行一个节点ROS采用 </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>  rosrun package_name node_name &amp;&amp; ros2 run package_name node_name (如果是ROS2中的python文件,节点名要去setup.py中写)</p></blockquote>\n</li>\n<li><p>[rqt]可以用来查看你运行的节点连接情况</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>  rosrun rqt_graph_tree rqt_graph_tree &amp;&amp; ros2 run rqt_graph_tree rqt_graph_tree 可根据当前内存中节点运行情况,生成连接图</p></blockquote>\n</li>\n</ol>\n","text":" 用途ROS类似一个数据传输的管道,也提供接口,好比cpu和其他设备间信息交互的总线.一开始是为解决机器人上信息传输问题,因而目前ROS开发社区中对这一块的库可...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%A8%E9%80%94\"><span class=\"toc-text\">用途</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ROS1%E5%92%8CROS2\"><span class=\"toc-text\">ROS1和ROS2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setup-py%E6%89%93%E5%8C%85\"><span class=\"toc-text\">setup.py打包</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#ROS1%E5%92%8CROS2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">ROS1和ROS2的一些基础信息</span></a></li></ol>","author":{"name":"shol","slug":"blog-author","avatar":"http://localhost:4000/static/img/d4.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"OpenCV","uid":"cdd0edf7fdd8b10c4ae1947cffd17b2c","slug":"OpenCV","date":"2023-09-06T17:31:40.000Z","updated":"2023-09-10T09:07:18.790Z","comments":true,"path":"api/articles/OpenCV.json","keywords":null,"cover":[],"text":"传统视觉OpenCV作为最基本的目标检测工具,单纯使用cv库来做图像处理也好,还是神经网络的图像识别也好,都会使用到OpenCV的API.可以说它是现在目标检测...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"传统视觉","slug":"传统视觉","count":1,"path":"api/categories/传统视觉.json"}],"tags":[{"name":"opencv函数","slug":"opencv函数","count":1,"path":"api/tags/opencv函数.json"},{"name":"hog+svm检测","slug":"hog-svm检测","count":1,"path":"api/tags/hog-svm检测.json"}],"author":{"name":"shol","slug":"blog-author","avatar":"http://localhost:4000/static/img/d4.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"神经网络","uid":"abeaebbd0b0f1648891139ac7999d458","slug":"text1","date":"2023-09-06T14:25:19.000Z","updated":"2023-09-10T09:12:30.645Z","comments":true,"path":"api/articles/text1.json","keywords":null,"cover":null,"text":"深度学习 概念pytorch、tensorflow … 这些都是，深度学习的框架，而pytorch为动态，tensorflow为静态(这里就在对计算图进行讨论了...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"shol","slug":"blog-author","avatar":"http://localhost:4000/static/img/d4.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}